from tkinter import Toplevel, Label, Button, Entry, IntVar, Listbox, messageboxfrom styles import apply_stylesclass FenetreInitiale:    def __init__(self, fenetre, clients):        self.fenetre = fenetre        self.clients = clients        self.choix = Label(fenetre, text="Choisissez votre mode de connexion")        apply_styles(self.choix, font=('Arial', 30, 'bold'), bg='#ddd', fg='#051094')        self.choix.pack(pady=20)        self.bouton_client = Button(fenetre, text="Client", command=self.ouvrir_espace_client)        self.bouton_ccp = Button(fenetre, text="CCP", command=self.ouvrir_espace_ccp)        apply_styles(self.bouton_client, font=('Arial', 20, 'bold'), bg='#f3c227', fg='#051094')        apply_styles(self.bouton_ccp, font=('Arial', 20, 'bold'), bg='#f3c227', fg='#051094')        self.bouton_client.pack(side='left', padx=100, pady=20)        self.bouton_ccp.pack(side='right', padx=100, pady=20)    def ouvrir_espace_client(self):        FenetreClient(self.fenetre, self.clients)    def ouvrir_espace_ccp(self):        FenetreCCP(self.fenetre, self.clients)class FenetreCCP:    def __init__(self, parent, clients):        self.clients = clients        self.fenetre = Toplevel(parent)        self.fenetre.title("Interface CCP")        self.fenetre.geometry("1080x720")        self.fenetre.configure(bg="#ddd")        self.label_list = Label(self.fenetre, text="Liste des clients")        apply_styles(self.label_list, font=('Arial', 30, 'bold'), bg='#ddd', fg='#051094')        self.label_list.pack(pady=20)        self.listbox = Listbox(self.fenetre, font=('Courier', 16))        self.listbox.pack(fill='both', expand=True, padx=20, pady=20)        self.update_listbox()        self.bouton_ajout = Button(self.fenetre, text="Ajouter Client", command=self.ajouter_client)        self.bouton_quitter = Button(self.fenetre, text="Retour", command=self.fenetre.destroy)        apply_styles(self.bouton_ajout, font=('Arial', 20, 'bold'), bg='#f3c227', fg='#051094')        apply_styles(self.bouton_quitter, font=('Arial', 20, 'bold'), bg='#f3c227', fg='#051094')        self.bouton_ajout.pack(side='left', padx=50, pady=20)        self.bouton_quitter.pack(side='right', padx=50, pady=20)    def update_listbox(self):        self.listbox.delete(0, 'end')        for num, solde in self.clients.items():            self.listbox.insert('end', f"Compte {num}: {solde} EUR")    def ajouter_client(self):        FenetreAjoutClient(self.fenetre, self.clients, self.update_listbox)class FenetreAjoutClient:    def __init__(self, parent, clients, refresh_callback):        self.clients = clients        self.refresh_callback = refresh_callback        self.fenetre = Toplevel(parent)        self.fenetre.title("Ajout Client")        self.fenetre.geometry("600x400")        self.fenetre.configure(bg="#ddd")        self.label_numero = Label(self.fenetre, text="Numéro de compte")        apply_styles(self.label_numero, font=('Arial', 16), bg='#ddd', fg='#051094')        self.label_numero.pack(pady=10)        self.saisie_numero = IntVar()        self.entry_numero = Entry(self.fenetre, textvariable=self.saisie_numero)        self.entry_numero.pack(pady=10)        self.label_solde = Label(self.fenetre, text="Solde initial")        apply_styles(self.label_solde, font=('Arial', 16), bg='#ddd', fg='#051094')        self.label_solde.pack(pady=10)        self.saisie_solde = IntVar()        self.entry_solde = Entry(self.fenetre, textvariable=self.saisie_solde)        self.entry_solde.pack(pady=10)        self.bouton_enregistrer = Button(self.fenetre, text="Enregistrer", command=self.enregistrer_client)        apply_styles(self.bouton_enregistrer, font=('Arial', 16), bg='#f3c227', fg='#051094')        self.bouton_enregistrer.pack(pady=20)    def enregistrer_client(self):        num = self.saisie_numero.get()        solde = self.saisie_solde.get()        if num in self.clients:            messagebox.showerror("Erreur", "Ce numéro de compte existe déjà.")        else:            self.clients[num] = solde            self.refresh_callback()            messagebox.showinfo("Succès", "Client ajouté avec succès.")            self.fenetre.destroy()class FenetreClient:    def __init__(self, parent, clients):        self.clients = clients        self.fenetre = Toplevel(parent)        self.fenetre.title("Interface Client")        self.fenetre.geometry("1080x720")        self.fenetre.configure(bg="#ddd")        self.label = Label(self.fenetre, text="Bienvenue dans l'espace client")        apply_styles(self.label, font=('Arial', 30, 'bold'), bg='#ddd', fg='#051094')        self.label.pack(pady=20)        self.label_numero = Label(self.fenetre, text="Numéro de compte")        apply_styles(self.label_numero, font=('Arial', 16), bg='#ddd', fg='#051094')        self.label_numero.pack(pady=10)        self.saisie_numero = IntVar()        self.entry_numero = Entry(self.fenetre, textvariable=self.saisie_numero)        self.entry_numero.pack(pady=10)        self.label_montant = Label(self.fenetre, text="Montant à retirer")        apply_styles(self.label_montant, font=('Arial', 16), bg='#ddd', fg='#051094')        self.label_montant.pack(pady=10)        self.saisie_montant = IntVar()        self.entry_montant = Entry(self.fenetre, textvariable=self.saisie_montant)        self.entry_montant.pack(pady=10)        self.bouton_valider = Button(self.fenetre, text="Valider", command=self.verifier_retrait)        apply_styles(self.bouton_valider, font=('Arial', 16), bg='#f3c227', fg='#051094')        self.bouton_valider.pack(pady=20)        self.resultat = Label(self.fenetre, text="", bg="#ddd", fg="#051094", font=('Arial', 16))        self.resultat.pack(pady=20)    def verifier_retrait(self):        num = self.saisie_numero.get()        montant = self.saisie_montant.get()        if num not in self.clients:            self.resultat.config(text="Compte introuvable !", fg="red")        else:            if self.clients[num] >= montant:                self.clients[num] -= montant                self.resultat.config(text=f"Retrait effectué avec succès. Nouveau solde: {self.clients[num]} EUR", fg="green")            else:                self.resultat.config(text="Solde insuffisant !", fg="red")